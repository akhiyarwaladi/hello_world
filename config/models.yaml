# Model configurations for Malaria Detection Pipeline
models:
  # Detection Models
  yolov8_detection:
    type: "detection"
    script: "python scripts/training/07_train_yolo_detection.py"
    args:
      data: "data/integrated/yolo/dataset.yaml"
      model_name: "yolov8_detection"
      epochs: 30
      batch: 8
      device: "cpu"
    validation_args:
      epochs: 2
      batch: 4
    description: "YOLOv8 detection for malaria parasites"
    # Output path for trained model weights
    output_model_path: "results/current_experiments/training/detection/yolov8_detection/*/weights/best.pt"

  yolov10_detection:
    type: "detection"
    script: "python scripts/training/07_train_yolo_detection.py"
    args:
      data: "data/integrated/yolo/dataset.yaml"
      model: "yolov10n.pt"
      model_name: "yolov10_detection"
      epochs: 30
      batch: 8
      device: "cpu"
    validation_args:
      epochs: 2
      batch: 4
    description: "YOLOv10 detection for malaria parasites"
    output_model_path: "results/current_experiments/training/detection/yolov10_detection/*/weights/best.pt"

  yolov11_detection:
    type: "detection"
    script: "python scripts/training/08_train_yolo11_detection.py"
    args:
      data: "data/integrated/yolo/dataset.yaml"
      model: "yolo11n.pt"
      epochs: 30
      batch: 8
      device: "cpu"
    validation_args:
      epochs: 2
      batch: 4
    description: "YOLOv11 detection for malaria parasites"
    # Output path for trained model weights
    output_model_path: "results/current_experiments/training/detection/yolo11_detection/*/weights/best.pt"

  rtdetr_detection:
    type: "detection"
    script: "python scripts/training/09_train_rtdetr_detection.py"
    args:
      data: "data/integrated/yolo/dataset.yaml"
      model: "rtdetr-s.pt"
      epochs: 50
      batch: 8
      device: "cpu"
    validation_args:
      epochs: 5
      batch: 4
    description: "RT-DETR detection for malaria parasites (Small model, optimized for small datasets)"

  yolov12_detection:
    type: "detection"
    script: "python scripts/training/12_train_yolo12_detection.py"
    args:
      data: "data/integrated/yolo/dataset.yaml"
      model: "yolo12n.pt"
      epochs: 30
      batch: 8
      device: "cpu"
    validation_args:
      epochs: 2
      batch: 4
    description: "YOLOv12 detection for malaria parasites (Attention-centric architecture)"
    output_model_path: "results/current_experiments/training/detection/yolov12_detection/*/weights/best.pt"

  # Classification Models
  yolov8_classification:
    type: "classification"
    script: "python scripts/training/11_train_classification_crops.py"
    args:
      data: "data/classification_multispecies"
      epochs: 25
      batch: 8
      device: "cpu"
    validation_args:
      epochs: 2
      batch: 4
    description: "YOLOv8 classification for malaria species"

  yolov11_classification:
    type: "classification"
    script: "python scripts/training/11_train_classification_crops.py"
    args:
      data: "data/classification_multispecies"
      model: "yolo11n-cls.pt"
      epochs: 25
      batch: 8
      device: "cpu"
    validation_args:
      epochs: 2
      batch: 4
    description: "YOLOv11 classification for malaria species"

  pytorch_resnet18_classification:
    type: "classification"
    script: "python scripts/training/11b_train_pytorch_classification.py"
    args:
      data: "data/classification_multispecies"
      model: "resnet18"
      epochs: 25
      batch: 8
      device: "cpu"
    validation_args:
      epochs: 2
      batch: 4
    description: "PyTorch ResNet18 classification"

  pytorch_efficientnet_b0_classification:
    type: "classification"
    script: "python scripts/training/11b_train_pytorch_classification.py"
    args:
      data: "data/classification_multispecies"
      model: "efficientnet_b0"
      epochs: 25
      batch: 8
      device: "cpu"
    validation_args:
      epochs: 2
      batch: 4
    description: "PyTorch EfficientNet-B0 classification"

  pytorch_densenet121_classification:
    type: "classification"
    script: "python scripts/training/11b_train_pytorch_classification.py"
    args:
      data: "data/classification_multispecies"
      model: "densenet121"
      epochs: 25
      batch: 8
      device: "cpu"
    validation_args:
      epochs: 2
      batch: 4
    description: "PyTorch DenseNet121 classification"

  pytorch_mobilenet_v2_classification:
    type: "classification"
    script: "python scripts/training/11b_train_pytorch_classification.py"
    args:
      data: "data/classification_multispecies"
      model: "mobilenet_v2"
      epochs: 25
      batch: 8
      device: "cpu"
    validation_args:
      epochs: 2
      batch: 4
    description: "PyTorch MobileNetV2 classification"

# Integrated Detection + Classification Pipelines
integrated_pipelines:
  yolov8_detection_yolo_classification:
    detection_model: "yolov8_detection"
    classification_models: ["yolov8_classification", "yolov11_classification"]
    crop_generation:
      script: "python scripts/12_generate_crops_from_detection.py"
      confidence: 0.25
      crop_size: 128
    description: "YOLOv8 detection → YOLO classification pipeline"

  yolov11_detection_multi_classification:
    detection_model: "yolov11_detection"
    classification_models: [
      "yolov8_classification",
      "yolov11_classification"
    ]
    crop_generation:
      script: "python scripts/12_generate_crops_from_detection.py"
      confidence: 0.25
      crop_size: 128
    description: "YOLOv11 detection → Multi-model classification pipeline"

  yolov11_detection_pytorch_classification:
    detection_model: "yolov11_detection"
    classification_models: [
      "pytorch_resnet18_classification",
      "pytorch_efficientnet_b0_classification",
      "pytorch_densenet121_classification",
      "pytorch_mobilenet_v2_classification"
    ]
    crop_generation:
      script: "python scripts/12_generate_crops_from_detection.py"
      confidence: 0.25
      crop_size: 128
    description: "YOLOv11 detection → PyTorch classification pipeline"

# PyTorch Classification Models
pytorch_models:
  pytorch_resnet18:
    type: "classification"
    script: "python scripts/training/11b_train_pytorch_classification.py"
    args:
      model: "resnet18"
      epochs: 25
      batch: 8
      device: "cpu"
    description: "PyTorch ResNet18 classification"

  pytorch_efficientnet_b0:
    type: "classification"
    script: "python scripts/training/11b_train_pytorch_classification.py"
    args:
      model: "efficientnet_b0"
      epochs: 25
      batch: 8
      device: "cpu"
    description: "PyTorch EfficientNet-B0 classification"

# Default configurations
defaults:
  device: "cpu"
  validation_timeout: 300
  production_timeout: 7200
  results_dir: "results/pipeline_final"
  logs_dir: "experiment_logs"
